////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __STACK_CORKSCREW_H__
#define __STACK_CORKSCREW_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <json-populator.h>

#include <stdint.h>

#include <vector>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef WIN32

#define pid_t uint32_t

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef uint32_t StackToken;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StackFrame
{
public:

  StackFrame ()
    : m_level (0)
    , m_pc (0)
    , m_sp (0)
  {
    m_function [0] = '\0';
  }

  uint64_t m_level;

  uint64_t m_pc;

  uint64_t m_sp;

  char m_function [128];

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StackCorkscrew : public JsonPopulator
{
public:

  explicit StackCorkscrew (const kvr::value &node);

  explicit StackCorkscrew (pid_t ppid, pid_t tid, size_t ignoreDepth, size_t maxDepth);

  ~StackCorkscrew ();

  bool GetFrame (size_t index, StackFrame &frame) const;

  size_t GetDepth () const;

  bool PopulateJsonObject (kvr::value &node) const override;

  bool PopulateJsonArray (kvr::value &node) const override;

protected:

  friend class StackSymbolicator;

  StackCorkscrew ();

  StackCorkscrew (const StackCorkscrew &rhs);

  size_t LoadFromJson (const kvr::value &node);

  size_t Unwind (pid_t ppid, pid_t tid, size_t ignoreDepth, size_t maxDepth);

  std::vector <StackFrame> m_frames;

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __STACK_CORKSCREW_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
