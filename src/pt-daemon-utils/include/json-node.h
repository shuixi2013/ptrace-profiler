////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __H_JSON_NODE_H__
#define __H_JSON_NODE_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <kvr.h>

#include <memory>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
class JsonNodeInterface
{
public:

  JsonNodeInterface () : m_nodeImpl (NULL) {}

  JsonNodeInterface (T *node) : m_nodeImpl (node) {}

  JsonNodeInterface (const T *node) : m_nodeImpl (const_cast <T*> (node)) {}

  JsonNodeInterface (const T &node) : m_nodeImpl (const_cast <T*> (&node)) {}

  T *GetImpl () const { return m_nodeImpl; }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  virtual bool IsObject () = 0;

  virtual bool IsArray () = 0;

  virtual bool IsString () = 0;

  virtual bool IsInteger () = 0;

  virtual bool IsFloat () = 0;

  virtual bool IsNull () = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

protected:

  T *m_nodeImpl;

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class JsonNodeKvr : public JsonNodeInterface<kvr::value>
{
public:

  JsonNodeKvr (kvr::ctx *context);

  JsonNodeKvr (kvr::value *node);

  JsonNodeKvr (const kvr::value *node);

  JsonNodeKvr (const kvr::value &node);

  ~JsonNodeKvr ();

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  bool IsObject () { return m_nodeImpl->is_map (); }

  bool IsArray () { return m_nodeImpl->is_array (); }

  bool IsString () { return m_nodeImpl->is_string (); }

  bool IsInteger () { return m_nodeImpl->is_integer (); }

  bool IsFloat () { return m_nodeImpl->is_float (); }

  bool IsNull () { return m_nodeImpl->is_null (); }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef JsonNodeKvr JsonNode;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __H_JSON_NODE_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
