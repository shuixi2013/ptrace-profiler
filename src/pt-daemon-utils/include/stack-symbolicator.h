////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __STACK_SYMBOLICATOR_H__
#define __STACK_SYMBOLICATOR_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "addr2line.h"

#include "mmap-manager.h"

#include "stack-corkscrew.h"

#include <unordered_map>

#include <string>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StackSymbolicator
{
public:

  StackSymbolicator (const MemoryMapManager &mmapManager);

  void Preprocess (const StackCorkscrew &corkscrew);

  void Symbolicate (Addr2Line &add2line);

  const std::unordered_map <uint64_t, StackToken> GetTokensByPcMap () const { return m_tokensByPc; }

  const std::unordered_map <uint32_t, std::string> GetLocationsByTokenMap () const { return m_locationsByToken; }

private:

  const MemoryMapManager &m_mmapManager;

  uint32_t m_currentToken;

  std::unordered_map <uint64_t, StackToken> m_tokensByPc;

  std::unordered_map <uint32_t, std::string> m_locationsByToken;

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __STACK_SYMBOLICATOR_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
